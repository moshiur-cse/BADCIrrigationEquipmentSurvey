#pragma checksum "D:\Projects\BAC002\WebSite\BADCIrrigationEquipmentSurvey\BADCIrrigationEquipmentSurvey\Views\Home\DataMap.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "83456fb88c2e9b22113c89e7ffe5e70ffd1e63c7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_DataMap), @"mvc.1.0.view", @"/Views/Home/DataMap.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/DataMap.cshtml", typeof(AspNetCore.Views_Home_DataMap))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Projects\BAC002\WebSite\BADCIrrigationEquipmentSurvey\BADCIrrigationEquipmentSurvey\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 2 "D:\Projects\BAC002\WebSite\BADCIrrigationEquipmentSurvey\BADCIrrigationEquipmentSurvey\Views\_ViewImports.cshtml"
using BADCIrrigationEquipmentSurvey;

#line default
#line hidden
#line 3 "D:\Projects\BAC002\WebSite\BADCIrrigationEquipmentSurvey\BADCIrrigationEquipmentSurvey\Views\_ViewImports.cshtml"
using BADCIrrigationEquipmentSurvey.Models;

#line default
#line hidden
#line 4 "D:\Projects\BAC002\WebSite\BADCIrrigationEquipmentSurvey\BADCIrrigationEquipmentSurvey\Views\_ViewImports.cshtml"
using BADCIrrigationEquipmentSurvey.Models.BasicModels;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"83456fb88c2e9b22113c89e7ffe5e70ffd1e63c7", @"/Views/Home/DataMap.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f18840fcd0f6dc65e539ad3db3277a2f6527ee2c", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_DataMap : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/mapstyle.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/leaflet/leaflet.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "div", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "dist", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "upaz", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "union", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "DTW", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "STW", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "LLP", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Total", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Total05", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "GWL", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "default", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "dynamic", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", "_ValidationScriptsPartial", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/leaflet/leaflet.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/maps/map_data/legend_theme.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "D:\Projects\BAC002\WebSite\BADCIrrigationEquipmentSurvey\BADCIrrigationEquipmentSurvey\Views\Home\DataMap.cshtml"
  
    ViewBag.Title = "Map View";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
            DefineSection("Styles", async() => {
                BeginContext(106, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(112, 51, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "8b272e5e6fba439dac81f1cf55a4d32a", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(163, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(169, 58, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c58f0bf0993b4996aeff24cdb4ef0fa5", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(227, 2, true);
                WriteLiteral("\r\n");
                EndContext();
            }
            );
            BeginContext(232, 2566, true);
            WriteLiteral(@"
<div id=""map_info"" class=""map_info map-full-screen"">
    <div id=""map"" class=""map_content""></div>
    <div id=""map_cord_info"" class=""coordinate_info""></div>
    <div id=""legend_info_btn"" class=""legend_btn_content legend_btn_right"" onclick=""javascript: legend_open_close('legend_info', 'open', 'left');"" title=""Show Map Information"">
        <div class=""legend_btn_right_img""></div>
    </div>
    <div id=""legend_info"" class=""map_legend"" style=""left: -3px;"">
        <div class=""map_legend_header"">
            <div id=""legend_info_title"" class=""map_legend_title""></div>
            <div class=""map_legend_close"" onclick=""javascript: legend_open_close('legend_info', 'close', 'left');"" title=""Close Map Information"">&times;</div>
        </div>
        <div id=""map_legend_infos"" class=""map_legend_infos""></div>
    </div>
    <div id=""legend_btn"" class=""legend_btn_content legend_btn_left"" onclick=""javascript: legend_open_close('legend', 'open', 'right');"" title=""Show Map Legend"">
        <div class=""lege");
            WriteLiteral(@"nd_btn_left_img""></div>
        <!--<span class=""map_legend_btn"" onclick=""javascript: legend_open_close('legend', 'open', 'right');"" title=""Show Map Legend"">&#9776;</span>-->
    </div>
    <div id=""legend"" class=""map_legend"" style=""right: -3px;"">
        <div class=""map_legend_header"">
            <div id=""legend_title"" class=""map_legend_title""></div>
            <div class=""map_legend_close left"" onclick=""javascript: legend_open_close('legend', 'close', 'right');"" title=""Close Map Legend"">&times;</div>
        </div>
        <div id=""map_legend_colors"" class=""map_legend_infos""></div>
    </div>
    <div class=""map_opt_content"">
        <label><input type=""checkbox"" id=""map_google_layer"" checked=""checked"" title=""Show/Hide Google Map / Background"" />Google Map</label>
        <label><input type=""checkbox"" id=""legend_info_opt"" checked=""checked"" title=""Show/Hide Map Information"" />Map Information</label>
        <label><input type=""checkbox"" id=""legend_opt"" checked=""checked"" title=""Show/Hide Map Le");
            WriteLiteral(@"gend"" />Map Legend</label>
        <label><input type=""checkbox"" id=""map_label_opt"" checked=""checked"" title=""Show/Hide Map Label"" />Map Label</label>
    </div>
    <div class=""map_opt_content"" style=""right: 10%; display: none"">
        <div id=""selected_info""></div>
    </div>

    <div class=""map_btns_content"">
        <div id=""map_center"" class=""map_btns btn_full_extent"" title=""Full extent the map""></div>
        <div id=""map-full-screen"" class=""map_btns btn_full_screen"" title=""Full-screen the map"">
");
            EndContext();
            BeginContext(2847, 1374, true);
            WriteLiteral(@"        </div>
        <div id=""filter_option"" class=""map_btns btn_filter_option"" title=""Filter the Map"" onclick=""map_filter_open('map_filter');""></div>
    </div>
    <div id=""map_filter_bg"" class=""modal-bg"">
        <div id=""map_filter_content"" class=""modal-content"" style=""width: 32vw; margin: 35px auto 0 auto;"">
            <div id=""option_title"" class=""modal-title"">
                <span class=""modal-title-txt"">▣ Map Filter Options</span>
                <button class=""close"" onclick=""if (confirm('Are you sure to Cancel ?')) map_filter_close('map_filter'); return false;"">
                    ✖
                </button>
            </div>
            <div id=""option_content"" class=""option-content"">
                <div class=""row"">
                    <div class=""col-sm-6"">
                        <fieldset style=""margin: 5px;"">
                            <legend>
                                <label for=""basic_survey"">▣ Survey Information</label>
                                <input ");
            WriteLiteral(@"type=""checkbox"" id=""basic_survey"" checked=""checked"" class=""basic"" title=""Show/Hide Survey Information"" />
                            </legend>
                            <label for=""admin_info"">Data Level:</label>
                            <select id=""admin_info"" class=""form-control"" style=""margin-top:3px;"">
                                ");
            EndContext();
            BeginContext(4221, 37, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "45d58058098240dd88c13a7f7a00d6f5", async() => {
                BeginContext(4241, 8, true);
                WriteLiteral("Division");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4258, 34, true);
            WriteLiteral("\r\n                                ");
            EndContext();
            BeginContext(4292, 38, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "55883a4590a24244a40b87707425bd52", async() => {
                BeginContext(4313, 8, true);
                WriteLiteral("District");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4330, 34, true);
            WriteLiteral("\r\n                                ");
            EndContext();
            BeginContext(4364, 37, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d9e76778112349ecae8d8bb8e67c9f53", async() => {
                BeginContext(4385, 7, true);
                WriteLiteral("Upazila");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4401, 34, true);
            WriteLiteral("\r\n                                ");
            EndContext();
            BeginContext(4435, 36, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dbde3892a0e346edbeca4be4fcf074ea", async() => {
                BeginContext(4457, 5, true);
                WriteLiteral("Union");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4471, 248, true);
            WriteLiteral("\r\n                            </select>\r\n                            <label for=\"survey_info\">Survey Data:</label>\r\n                            <select id=\"survey_info\" class=\"form-control\" style=\"margin-top:3px;\">\r\n                                ");
            EndContext();
            BeginContext(4719, 42, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4411825783be4cdb9b89abc291d8a71f", async() => {
                BeginContext(4739, 13, true);
                WriteLiteral("Deep Tubewell");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4761, 34, true);
            WriteLiteral("\r\n                                ");
            EndContext();
            BeginContext(4795, 45, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4e31e503cf044764a1580ccdfbb5ea92", async() => {
                BeginContext(4815, 16, true);
                WriteLiteral("Shallow Tubewell");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4840, 34, true);
            WriteLiteral("\r\n                                ");
            EndContext();
            BeginContext(4874, 42, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dc954d87884a424c813c9f057f62a085", async() => {
                BeginContext(4894, 13, true);
                WriteLiteral("Low Lift Pump");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4916, 34, true);
            WriteLiteral("\r\n                                ");
            EndContext();
            BeginContext(4950, 43, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1b31cf95281a4798b01da876df6ec70b", async() => {
                BeginContext(4972, 12, true);
                WriteLiteral("Total - 2016");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4993, 34, true);
            WriteLiteral("\r\n                                ");
            EndContext();
            BeginContext(5027, 45, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "50bb869cc1544d4b80db38a94741c6d2", async() => {
                BeginContext(5051, 12, true);
                WriteLiteral("Total - 2005");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_11.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(5072, 34, true);
            WriteLiteral("\r\n                                ");
            EndContext();
            BeginContext(5106, 46, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba2756ca4fff42f48b795d7a30f6412b", async() => {
                BeginContext(5126, 17, true);
                WriteLiteral("Groundwater Level");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(5152, 244, true);
            WriteLiteral("\r\n                            </select>\r\n                            <label for=\"\">Data Legend Theme:</label>\r\n                            <select id=\"legend_theme\" class=\"form-control\" style=\"margin-top:3px;\">\r\n                                ");
            EndContext();
            BeginContext(5396, 46, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8528c7f96f1a4fe9a4f4d409ead25e87", async() => {
                BeginContext(5420, 13, true);
                WriteLiteral("Default Theme");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_13.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(5442, 34, true);
            WriteLiteral("\r\n                                ");
            EndContext();
            BeginContext(5476, 46, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c0b7b9e999e541c0b67a429535ee2f28", async() => {
                BeginContext(5500, 13, true);
                WriteLiteral("Dynamic Theme");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(5522, 1449, true);
            WriteLiteral(@"
                            </select>
                        </fieldset>
                    </div>
                    <div class=""col-sm-6"">
                        <fieldset style=""margin: 5px;"">
                            <legend>▣ Admin Boundaries:</legend>
                            <div class=""checkbox"">
                                <label for=""admin_div""><input type=""checkbox"" id=""admin_div"" class=""multi-chkbx admin"" title=""Show/Hide Division Boundary"" />Division</label>
                            </div>
                            <div class=""checkbox"">
                                <label for=""admin_dist""><input type=""checkbox"" id=""admin_dist"" class=""multi-chkbx admin"" title=""Show/Hide District Boundary"" />District</label>
                            </div>
                            <div class=""checkbox"">
                                <label for=""admin_upaz""><input type=""checkbox"" id=""admin_upaz"" class=""multi-chkbx admin"" title=""Show/Hide Upazila Boundary"" />Upazila</labe");
            WriteLiteral(@"l>
                            </div>
                            <div class=""checkbox"">
                                <label for=""admin_union""><input type=""checkbox"" id=""admin_union"" class=""multi-chkbx admin"" title=""Show/Hide Union Boundary"" />Union</label>
                            </div>
                        </fieldset>
                    </div>
                </div>
                <div class=""row"">
");
            EndContext();
            BeginContext(8655, 1070, true);
            WriteLiteral(@"                    <div class=""col-sm-12"">
                        <fieldset style=""margin: 5px;"">
                            <legend>▣ Others Map Layers</legend>
                            <div class=""checkbox"">
                                <label for=""crop_suit""><input type=""checkbox"" id=""crop_suit"" class=""multi-chkbx layer"" data=""HYVBORO"" title=""Show/Hide Crop Suitability"" />Crop Suitability</label>
                            </div>
                            <div class=""checkbox"">
                                <label for=""agro_eco""><input type=""checkbox"" id=""agro_eco"" class=""multi-chkbx layer"" data=""REGNM"" title=""Show/Hide Agro-Ecological Regions and Sub-Regions"" />Agro-Ecological Regions and Sub-Regions</label>
                            </div>
                            <div class=""checkbox"">
                                <label for=""phys_unit""><input type=""checkbox"" id=""phys_unit"" class=""multi-chkbx layer"" data=""PHY_NM"" title=""Show/Hide Physiographic Units"" />Physiographic Units");
            WriteLiteral("</label>\r\n                            </div>\r\n");
            EndContext();
            BeginContext(10008, 886, true);
            WriteLiteral(@"                            <div class=""checkbox"">
                                <label for=""major_river""><input type=""checkbox"" id=""major_river"" class=""multi-chkbx layer"" data=""RIVNAME"" title=""Show/Hide Major Rivers"" />Major River</label>
                            </div>
                        </fieldset>
                    </div>
                </div>
            </div>
            <div class=""option-footer"">
                <div class=""row"" style=""border-top: 1px solid #fff;"">
                    <div class=""col-sm-12"" style=""text-align: center; padding: 5px 5px 6px 5px;"">
                        <button class=""modal-btns modal-close"" onclick=""if (confirm('Are you sure to Cancel ?')) map_filter_close('map_filter'); return false;"">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(10912, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(10918, 44, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("partial", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "0e20a0f0a1cb4bf2938bb5119ae3627a", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper.Name = (string)__tagHelperAttribute_15.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_15);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(10962, 8, true);
                WriteLiteral("\r\n\r\n    ");
                EndContext();
                BeginContext(10970, 48, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8a9a515d19f94191bcf354386c580e29", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(11018, 2, true);
                WriteLiteral("\r\n");
                EndContext();
                BeginContext(11088, 2, true);
                WriteLiteral("\r\n");
                EndContext();
                BeginContext(11969, 4, true);
                WriteLiteral("    ");
                EndContext();
                BeginContext(11973, 81, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "550d3e6543f44f389da32e307963c09e", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(12054, 2, true);
                WriteLiteral("\r\n");
                EndContext();
                BeginContext(12221, 39815, true);
                WriteLiteral(@"    <script>


        var map,
            zooming = 7,
            data_type = 1,
            map_data = [],
            data_info = [];


        function set_basic_opts() {

            var map = L.map('map').setView([23.737777, 90.537777], 7);

            var baseLayers = {
                ""Mapbox"": mapbox,
                ""OpenStreetMap"": osm
            };
            var overlays = {
                ""Marker"": marker,
                ""Roads"": roadsLayer
            };
            L.control.layers(baseLayers, overlays).addTo(map);

            //L.tileLayer.provider('Stamen.Watercolor').addTo(map);

            L.tileLayer('https://www.cegisbd.com/', {
                attribution: 'Map data © <a href=""https://www.cegisbd.com/"">CEGIS</a>'
            }).addTo(map);

            L.control.scale().addTo(map);



            //map.on('click', function (e) {
            //    alert(""Lat, Lon : "" + e.latlng.lat.toFixed(5) + "", "" + e.latlng.lng.toFixed(5));
            //})");
                WriteLiteral(@";

            map.on('click', function (evt) {
                alert(evt.latlng);
                //$(""#map_cord_info"").html(evt.latlng.lat.toFixed(6) + "", "" + evt.latlng.lng.toFixed(6));
            });

            map.on('mousemove', function (evt) {
                $(""#map_cord_info"").html(evt.latlng.lat.toFixed(6) + "", "" + evt.latlng.lng.toFixed(6));
            });









            adminCode = $(""#admin_info"").val();

            set_survey_data();

            var adminLayerPath = ""../js/maps/map_data/"" + adminCode + "".json"";

            var
                adminFieldCode = adminCode + ""_code"",
                adminFieldName = adminCode + ""_name"",
                adminName = $(""#admin_info option:selected"").text(),
                dataName = $(""#survey_info option:selected"").text(),
                totalValue = 0,
                currAdminCode,
                currAdminName,
                dataValue,
                noDataClass = ""#FFFFFF"",
                sele");
                WriteLiteral(@"ctedPolyId,
                polyCenter,
                offsetLeft,
                labelClass,
                legendTheme = $(""#legend_theme"").val() == ""dynamic""
                    ? get_dynamic_theme(map_data)
                    : legend_themes[adminCode + ""_"" + $(""#survey_info"").val()];

            if (!legendTheme) {
                legendTheme = get_dynamic_theme(map_data);
                $(""#legend_theme"").val(""dynamic"");
            }

            if (legendTheme && legendTheme.length > 0) {
                noDataClass = legendTheme[legendTheme.length - 1].color;
                legendTheme.splice(-1, 1);
            }

            map_data.map(d => totalValue += parseFloat(d.data_value));
            totalValue = (totalValue % 1 == 0) ? totalValue : totalValue.toFixed(2);

            $(""#legend_title"").append(dataName + "" legend "");


            //L.geoJSON(adminLayerPath, {
            //    style: function (feature) {
            //        return { color: feature.pro");
                WriteLiteral(@"perties.color };
            //    }
            //}).bindPopup(function (layer) {
            //    return layer.feature.properties.description;
            //}).addTo(map);

            $.getJSON(adminLayerPath, function (map_layer) {
                if (!map_layer) return;

                L.geoJSON(map_layer, {
                    style: function (feature) {
                        return { color: ""#03a""/*feature.properties.color*/ };
                    }
                }).bindPopup(function (layer) {
                    feature.getProperty(adminFieldName);
                    return layer.feature.properties.description;
                }).addTo(map);

            });


            //L.control.mousePosition().addTo(map);

            //add standard controls
            //L.control.coordinates().addTo(map);
            //add configured controls
            //L.control.coordinates({
            //    position: ""bottomleft"",
            //    decimals: 2,
            //    deci");
                WriteLiteral(@"malSeperator: "","",
            //    labelTemplateLat: ""Latitude: {y}"",
            //    labelTemplateLng: ""Longitude: {x}""
            //}).addTo(map);
            /*
            var shapes = L.featureGroup().addTo(map);

            shapes.addLayer(// some vector shape //); // As many times as individual shapes

            shapes.on(""click"", function (event) {
                shapecoords.innerHTML = event.latlng.toString();
                map.fire(""click"", event); // Trigger a map click as well.
            });
        */

            L.marker([23.781753, 90.413413]).addTo(map)
                .bindPopup('A pretty CSS3 popup.<br> Easily customizable.')
                .openPopup();

        }









        $(function () {

            var adminCode = ""upaz"";
            $(""#map_label_opt"").prop(""checked"", false);

            $(""#admin_info"").val(adminCode);

            set_basic_opts();
            //map_selected_info();
            //set_survey_data(true);

 ");
                WriteLiteral(@"           draggable_modal(""option_title"", ""map_filter_content"", ""map_filter_bg"", false);

        });


        var isOpen = false;

        function map_filter_open(content) {
            if (!isOpen)
                modal_open(content, 50);
            isOpen = true;
        }

        function map_filter_close(content) {
            if (isOpen)
                modal_close(content);
            isOpen = false;
        }

        function legend_open_close(legendId, openCloseOpt, propOpt) {
            if (openCloseOpt == ""open"") {
                $(""#"" + legendId + ""_btn"")
                    .css(propOpt, ""-"" + ($(""#"" + legendId + ""_btn"").outerWidth(true) + 10) + ""px"");
                $(""#"" + legendId).css(propOpt, ""-2px"");

                $(""#"" + legendId + ""_opt"").prop(""checked"", true);
            } else if (openCloseOpt == ""close"") {
                $(""#"" + legendId).css(propOpt, ""-"" + ($(""#"" + legendId).outerWidth(true) + 5) + ""px"");
                $(""#"" + legendId + ""_");
                WriteLiteral(@"btn"").css(propOpt, ""-10px"");

                $(""#"" + legendId + ""_opt"").prop(""checked"", false);
            }
        }






        function map_label_show_hide() {

            var isShow = $(""#map_label_opt"").prop(""checked"");

            if (isShow) {
                $("".map_label"").fadeIn(500);
            } else {
                $("".map_label"").fadeOut(500);
            }

            return false;

            /*
            var distCode = $(""#admin_info_district"").val(),
                upazCode = $(""#admin_info_upazila"").val(),
                isShow = $(""#map_label_opt"").prop(""checked""),
                pc = 0;

            //if (upazCode) {
            //    for (pc = 0; pc < all_map_poly.length; pc++) {
            //        if (all_map_poly[pc].upaz_code == upazCode && all_map_poly[pc].map_label) {
            //            all_map_poly[pc].map_label.setVisible(isShow);
            //        }
            //    }
            //} else {
            //    for ");
                WriteLiteral(@"(pc = 0; pc < all_map_poly.length; pc++) {
            //        if (all_map_poly[pc].dist_code == distCode && all_map_poly[pc].map_label) {
            //            all_map_poly[pc].map_label.setVisible(isShow);
            //        }
            //    }
            //}

            //return false;

            var selectedAdmin = """";
            if (distCode)
                selectedAdmin = "".dist_"" + distCode;

            if (upazCode)
                selectedAdmin += "".upaz_"" + upazCode;

            if (selectedAdmin != """") {
                $("".map_label:not("" + selectedAdmin + "")"").fadeOut(500);
                if (isShow) {
                    $("".map_label"" + selectedAdmin).fadeIn(500);
                } else {
                    $("".map_label"" + selectedAdmin).fadeOut(500);
                }
                //$("".map_label:not(""+selected_admin+"")"").fadeIn(500);
            } else {
                if (isShow) {
                    $("".map_label"").fadeIn(500);
         ");
                WriteLiteral(@"       } else {
                    $("".map_label"").fadeOut(500);
                }
            }
            return false;
            */
        }

        function get_dynamic_theme(mapData) {
            var minVal = Infinity, maxVal = -Infinity, currVal, theme = [];

            if (!mapData || mapData.length < 1)
                mapData = map_data;

            if (!mapData || mapData.length < 1) return theme;

            for (var dc = 0; dc < mapData.length; dc++) {
                if (!mapData[dc].data_value)
                    continue;


                //if (!currVal && currVal != 0) $.isNumeric(mapData[dc].data_value)
                if (isNaN(parseFloat(mapData[dc].data_value)))
                    continue;

                currVal = parseFloat(mapData[dc].data_value);

                if (minVal > currVal)
                    minVal = currVal;
                if (maxVal < currVal)
                    maxVal = currVal;
            }


            //var clrClas");
                WriteLiteral(@"s = [""#FFEEDD"", ""#FEBBAA"", ""#FE9988"", ""#FA7766"", ""#FA5544"", ""#FA3322"", ""#FA1100""],
            var clrClass = [""#FFFF80"", ""#FAD155"", ""#F2A82F"", ""#AD5314"", ""#6A0000"", ""#4A0000""],
                delt = parseInt((maxVal - minVal) / clrClass.length),
                ci = 0;

            for (ci = 0; ci < clrClass.length; ci++) {
                if (ci === 0) {
                    theme[ci] = { minVal: minVal, maxVal: delt, color: clrClass[ci] };
                } else if (ci === clrClass.length - 1) {
                    theme[ci] = { minVal: (delt * ci) + 1, maxVal: maxVal, color: clrClass[ci] };
                } else {
                    theme[ci] = { minVal: (delt * ci) + 1, maxVal: (delt * (ci + 1)), color: clrClass[ci] };
                }
            }

            theme[ci] = { minVal: ""noData"", maxVal: ""-"", color: ""#FFFFFF"" };

            return theme;
        }


        function get_theme(minVal, maxVal) {
            var theme = [];

            if (!minVal || !maxVal) retur");
                WriteLiteral(@"n theme;

            //var clrClass = [""#FFEEDD"", ""#FEBBAA"", ""#FE9988"", ""#FA7766"", ""#FA5544"", ""#FA3322"", ""#FA1100""],
            var clrClass = [""#AFFF80"", ""#AAD155"", ""#A2A82F"", ""#8D5314"", ""#5A0000"", ""#3A0000""],
                delt = parseInt((maxVal - minVal) / clrClass.length),
                ci;

            for (ci = 0; ci < clrClass.length; ci++) {
                if (ci === 0) {
                    theme[ci] = { minVal: minVal, maxVal: delt, color: clrClass[ci] };
                } else if (ci === clrClass.length - 1) {
                    theme[ci] = { minVal: (delt * ci) + 1, maxVal: maxVal, color: clrClass[ci] };
                } else {
                    theme[ci] = { minVal: (delt * ci) + 1, maxVal: (delt * (ci + 1)), color: clrClass[ci] };
                }
            }

            theme[ci] = { minVal: ""noData"", maxVal: ""-"", color: ""#FFFFFF"" };

            return theme;
        }



        function set_survey_data() {
            //map_selected_info();
         ");
                WriteLiteral(@"   //map_label_show_hide();

            var adminCode = $(""#admin_info"").val(),
                dataCode = $(""#survey_info"").val();

            map_data = [];
            try {
                $.getJSON(""../js/maps/map_data/"" + ""all_data"" + "".json"",
                    function (allData) {
                        if (allData && allData.all_data.length > 0) {
                            //console.log(allData.all_data);

                            allData.all_data.some(function (ad, i) {
                                if (ad.adminCode == adminCode) {
                                    map_data = ad.data.map(function (d, i) {
                                        return { geo_code: d[adminCode + ""Code""], data_value: d[dataCode] };
                                    });
                                    return true;
                                }
                                return false;
                            });
                        }
                    });

   ");
                WriteLiteral(@"         } catch (e) {
                map_data = [];
                msg.init(""Error"", ""Error... . ."", ""Error trying to load/parse JSON data !! <br />"" + e.message);
            }

        }

    </script>

    <script type=""text/javascript"">

        var blankUrl = '../images/blank.png',
            osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
            baseUrl = 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw',
            googleUrl = 'http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}',
            mapAttrib = '&copy; <a href=""http://www.cegisbd.com/"">CEGIS</a>',
            map = new L.Map('map', { center: new L.LatLng(23.737777, 90.537777), zoomControl: false, zoom: 7.0 }),
            drawnItems = L.featureGroup().addTo(map);

        var blank = L.tileLayer(blankUrl, { minZoom: 0, maxZoom: 25, attribution: mapAttrib }),
            openstreet =");
                WriteLiteral(@" L.tileLayer(osmUrl, { minZoom: 0, maxZoom: 25, attribution: mapAttrib }),
            grayscale = L.tileLayer(baseUrl, { minZoom: 0, maxZoom: 25, id: 'mapbox.light', attribution: mapAttrib }),
            streets = L.tileLayer(baseUrl, { minZoom: 0, maxZoom: 25, id: 'mapbox.streets', attribution: mapAttrib }),
            google = L.tileLayer(googleUrl, { minZoom: 0, maxZoom: 25, attribution: mapAttrib });

        //adding controls in map :: start
        L.control.pan().addTo(map);
        L.control.zoom().addTo(map);

        //map fit to 100%
        var mapfit = L.control({ position: ""topright"" });
        mapfit.onAdd = function(map) {
            var div = L.DomUtil.createWithID(""div"", ""mapfit"", ""info map-fit"");
            div.innerHTML = '<i class=""fa fa-arrows-alt""></i>';
            return div;
        };

        mapfit.addTo(map);

        L.control.layers(
            {
                'None': blank,
                'Open Street': openstreet,
                'Grayscale': ");
                WriteLiteral(@"grayscale,
                'Streets': streets,
                'Google': google
            },
            {
                'Select Layer': drawnItems
            },
            {
                position: 'topright',
                collapsed: true
            }).addTo(map);

        map.addControl(new L.Control.Draw({
            edit: {
                featureGroup: drawnItems,
                poly: {
                    allowIntersection: false
                }
            },
            draw: {
                polygon: {
                    allowIntersection: false,
                    showArea: true
                }
            }
        }));

        map.on(L.Draw.Event.CREATED, function (event) {
            var layer = event.layer;
            drawnItems.addLayer(layer);
        });
        //end

        //map info show in popup
        var slPointLabel;
        function popUp(feature, layer) {
            var out = [];
            if (feature.properties) {
 ");
                WriteLiteral(@"               for (key in feature.properties) {
                    out.push(key + "": "" + feature.properties[key]);
                }

                if (feature.properties['SL ID'] != '') {
                    out.push(""<img src='../images/slimage/"" + feature.properties['SL ID'] + "".jpg' title='"" + feature.properties['Name'] + ', ' + feature.properties['River'] + ""' style='width: 70%;' class='img-responsive img-rounded img-thumbnail' /><hr /><a href='/datacollection/search?ross="" + feature.properties['SL ID'] + ""&page=1&pageSize=10' class='btn btn-default btn-block btn-info'>View Data</a>"");
                }

                layer.bindPopup(out.join(""<br />""));
            }
        }

        function popUpOfMS(feature, layer) {
            var out = [];
            if (feature.properties) {
                for (key in feature.properties) {
                    out.push(key + "": "" + feature.properties[key]);
                }

                if (feature.properties['SL ID'] != '') {
  ");
                WriteLiteral(@"                  out.push(""<img src='../images/slimage/"" + feature.properties['SL ID'] + "".jpg' title='"" + feature.properties['Name'] + ', ' + feature.properties['River'] + ""' style='width: 70%;' class='img-responsive img-rounded img-thumbnail' /><hr /><a href='/datacollection/search?ross="" + feature.properties['SL ID'] + ""&page=1&pageSize=10' class='btn btn-default btn-block btn-info'>View Data</a>"");
                }

                layer.bindPopup(out.join(""<br />""));
            }
        }

        var layers;
        var divPopUpLabel, distPopUpLabel;
        function divPopUp(feature, layer) {
            var out = [];
            if (feature.properties) {
                for (key in feature.properties) {
                    out.push(key + "": "" + feature.properties[key]);
                }

                layer.bindPopup(out.join(""<br />""));
            }

            var bounds = layer.getBounds();
            var center = bounds.getCenter();
            divPopUpLabel = L.mark");
                WriteLiteral(@"er(center, {
                icon: L.divIcon({
                    iconSize: null,
                    className: 'divMapLabel',
                    html: '<div>' + String(feature.properties.Name) + '</div>'
                })
            });

            map.addLayer(divPopUpLabel);
        }

        function distPopUp(feature, layer) {
            var out = [];
            if (feature.properties) {
                for (key in feature.properties) {
                    out.push(key + "": "" + feature.properties[key]);
                }

                layer.bindPopup(out.join(""<br />""));
            }

            var bounds = layer.getBounds();
            var center = bounds.getCenter();
            distPopUpLabel = L.marker(center, {
                icon: L.divIcon({
                    iconSize: null,
                    className: 'distMapLabel',
                    html: '<div>' + feature.properties.District + '</div>'
                })
            });
            map.addL");
                WriteLiteral(@"ayer(distPopUpLabel);
        }

        //// control that shows state info on hover :: start
        //var info = L.control();

        //info.onAdd = function (map) {
        //    this._div = L.DomUtil.create('div', 'info');
        //    this.update();
        //    return this._div;
        //};

        //info.update = function (props) {
        //    this._div.innerHTML = '<h4>BD Population: </h4>' + (props ? '<b>' + props.distname + '</b><br />' + props.male + ' people / mi<sup>2</sup>' : 'Hover over a state');
        //};

        //info.addTo(map);
        //end

        //adding X-Axis Y-Axis co-ordinate to map :: start
        var xyAxis = L.control({ position: 'bottomleft' });

        xyAxis.onAdd = function (map) {
            this._div = L.DomUtil.createWithID('div', 'xyAxis', 'xy-position');
            return this._div;
        };

        xyAxis.addTo(map);

        function onMouseMove(e) {
            document.getElementById('xyAxis').innerHTML = 'X-Axis: ' ");
                WriteLiteral(@"+ e.latlng.lat.toFixed(8) + '<br>Y-Axis: ' + e.latlng.lng.toFixed(8);
        }

        map.on('mousemove', onMouseMove);
        //end

        function highlightFeature(e) {
            var layer = e.target;

            layer.setStyle({
                weight: 2,
                color: '#666',
                dashArray: '',
                fillOpacity: 0.8
            });

            if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
                layer.bringToFront();
            }

            //info.update(layer.feature.properties);
        }

        var div, dist, mainRiver, majorRiver, detailriver, slpoint,
            slpointold, marker, circle1, circle2, polygon, hotSpot,
            searchPoint;

        function resetHighlight(e) {
            dist.resetStyle(e.target);
            //info.update();
        }

        var popup = L.popup();
        function zoomToFeature(e) {
            map.fitBounds(e.target.getBounds());
            popup.setLatLn");
                WriteLiteral(@"g(e.latlng).setContent(""You clicked the map at "" + e.latlng.toString()).openOn(map);
        }

        ////adding legend to map :: start
        //var legend = L.control({ position: 'bottomright' });

        //legend.onAdd = function (map) {
        //    var div = L.DomUtil.create('div', 'info legend'),
        //        grades = [0, 10, 20, 50, 100, 200, 500, 1000],
        //        labels = [],
        //        from, to;

        //    for (var i = 0; i < grades.length; i++) {
        //        from = grades[i];
        //        to = grades[i + 1];

        //        labels.push('<i style=""background:' + getColor(from + 1) + '""></i> ' + from + (to ? '&ndash;' + to : '+'));
        //    }

        //    div.innerHTML = labels.join('<br>');
        //    return div;
        //};

        //legend.addTo(map);
        ////end

        //feature layer added here :: start
        div = new L.GeoJSON.AJAX([""/MapData/Shapes/DivisionWGS84.geojson""], { style: div_style, onEachFeature");
                WriteLiteral(@": divPopUp });
        dist = new L.GeoJSON.AJAX([""/MapData/Shapes/DistrictWGS84.geojson""], { style: dist_style, onEachFeature: distPopUp }).addTo(map);
        mainRiver = new L.GeoJSON.AJAX([""/MapData/Shapes/MainRiverWGS84.geojson""], { style: main_river_style, onEachFeature: popUp }).addTo(map);
        majorRiver = new L.GeoJSON.AJAX([""/MapData/Shapes/MajorRiverWGS84.geojson""], { style: major_river_style, onEachFeature: popUp });
        //detailriver = new L.GeoJSON.AJAX([""/MapData/Shapes/DetailRiverWGS84.geojson""], { style: detail_river_style, onEachFeature: popUp });

        slpoint = new L.GeoJSON.AJAX([""/MapData/Shapes/StrategicLocationWGS84.geojson""], {
            style: data_point_style,
            onEachFeature: popUpOfMS,
            pointToLayer: function (feature, latlng) {
                return L.marker(latlng, { icon: smallIcon }).bindLabel(feature.properties.Name, { noHide: true, offset: [5, -32] });
            }
        }).addTo(map);

        slpointold = new L.GeoJSON.AJ");
                WriteLiteral(@"AX([""/MapData/Shapes/MonitoringStationWGS84.geojson""], {
            style: data_point_style,
            onEachFeature: popUp,
            pointToLayer: function (feature, latlng) {
                return L.marker(latlng, { icon: smallIconForOld }).bindLabel(feature.properties.Name, { noHide: true, offset: [5, -32] });
            }
        });

        hotSpot = new L.GeoJSON.AJAX([""/MapData/Shapes/HotSpotWGS84.geojson""], { style: hot_spot_style, onEachFeature: popUp });
        //end

        ////drawing layer :: start
        //marker = new L.marker([23.78035, 90.41664]).addTo(map)
        //              .bindPopup(""<b>Hello world!</b><br />I am a popup."").openPopup();

        //circle1 = new L.circle([23.78175, 90.41334], 50, {
        //    color: 'red',
        //    fillColor: '#f03',
        //    fillOpacity: 0.5
        //}).addTo(map).bindPopup(""CEGIS"");

        //circle2 = new L.circle([23.78175, 90.41334], 80, {
        //    color: 'red',
        //    fillColor: '#f09");
                WriteLiteral(@"',
        //    fillOpacity: 0.5
        //}).addTo(map).bindPopup(""GIS"");

        //polygon = new L.polygon([
        //    [23.78085, 90.42278],
        //    [23.78074, 90.42552],
        //    [23.78258, 90.42567]
        //]).addTo(map).bindPopup(""I am a polygon."");
        ////end

        //assigning css style to river layer
        function main_river_style(feature) {
            return {
                fillColor: getRiverColor(feature.properties.Type),
                weight: 1,
                opacity: 1,
                color: '#73DFFF',
                //dashArray: '5',
                fillOpacity: 0.5
            };
        }

        function major_river_style(feature) {
            return {
                //fillColor: getRiverColor(feature.properties.type),
                weight: 1,
                opacity: 1,
                color: '#00A9E6',
                //dashArray: '5',
                fillOpacity: 0.5
            };
        }

        function deta");
                WriteLiteral(@"il_river_style(feature) {
            return {
                fillColor: getRiverColor(feature.properties.rivertype),
                weight: 1,
                opacity: 1,
                color: '#ACACFF',
                //dashArray: '5',
                fillOpacity: 0.75
            };
        }

        function hot_spot_style(feature) {
            return {
                fillColor: getHotSpotColor(feature.properties.Classes),
                weight: 1,
                opacity: 1,
                color: getHotSpotColor(feature.properties.Classes),
                //dashArray: '5',
                fillOpacity: 0.95
            };
        }

        //assigning css style to data point layer
        function data_point_style(feature) {
            return {
                fillColor: 'red',//getRiverColor(feature.properties.type),
                weight: 1,
                opacity: 1,
                color: 'red',
                //dashArray: '5',
                fillOpacity: ");
                WriteLiteral(@"0.5
            };
        }

        //assigning css style to layer
        function div_style(feature) {
            return {
                fillColor: getColor(feature.properties.distcode),
                weight: 1,
                opacity: 1,
                color: 'blue',
                //dashArray: '5',
                fillOpacity: 0.5
            };
        }

        function dist_style(feature) {
            return {
                fillColor: getColor(feature.properties.distcode),
                weight: 1,
                opacity: 1,
                color: 'green',
                //dashArray: '5',
                fillOpacity: 0.3
            };
        }

        function getRiverColor(d) {
            switch (d) {
            case 'River': return '#73DFFF';
            case 'Char': return '#E69800';
            default: '#FD127B';
            }
        }

        function getColor(d) {
            return getRandomColor();
        }

        function getRa");
                WriteLiteral(@"ndomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }

            return color;
        }

        function getHotSpotColor(d) {
            switch (d) {
            case 'Low': return '#FFBEBE';
            case 'Moderate': return '#FF7F7F';
            case 'Severe': return '#FF0000';
            default: '#FFFFFF';
            }
        }

        //function getHotSpotColor(d) {
        //    switch (d) {
        //        case '0': return '#FF2200';
        //        case '1': return '#FF6200';
        //        case '2': return '#FF9100';
        //        case '3': return '#FFBB00';
        //        case '4': return '#FFEA00';
        //        case '5': return '#DFEB00';
        //        case '6': return '#A4C400';
        //        case '7': return '#6BA100';
        //        case '8': return '#3C8000';
        //");
                WriteLiteral(@"        case '9': return '#006100';
        //        default: '#FFFFFF';
        //    }
        //}

        $(""#mainRiverLayer"").change(function (event) {
            event.preventDefault();

            if ($(this).is(':checked')) {
                if (map.hasLayer(mainRiver)) {
                    map.removeLayer(mainRiver);
                } else {
                    map.addLayer(mainRiver);
                }
            } else {
                map.removeLayer(mainRiver);
            }
        });

        $(""#majorRiverLayer"").change(function (event) {
            event.preventDefault();

            if ($(this).is(':checked')) {
                if (map.hasLayer(majorRiver)) {
                    map.removeLayer(majorRiver);
                } else {
                    map.addLayer(majorRiver);
                }
            } else {
                map.removeLayer(majorRiver);
            }
        });

        $(""#distLayer"").change(function (event) {
            ev");
                WriteLiteral(@"ent.preventDefault();

            if ($(this).is(':checked')) {
                if (map.hasLayer(dist)) {
                    map.removeLayer(dist);
                    $("".distMapLabel"").addClass('hide');
                } else {
                    map.addLayer(dist);
                    $("".distMapLabel"").removeClass('hide');
                }
            } else {
                map.removeLayer(dist);
                $("".distMapLabel"").addClass('hide');
            }
        });

        $(""#divLayer"").change(function (event) {
            event.preventDefault();

            if ($(this).is(':checked')) {
                if (map.hasLayer(div)) {
                    map.removeLayer(div);
                    $("".divMapLabel"").addClass('hide');
                } else {
                    map.addLayer(div);
                    $("".divMapLabel"").removeClass('hide');
                }
            } else {
                map.removeLayer(div);
                map.removeLayer(divPop");
                WriteLiteral(@"UpLabel);
                $("".divMapLabel"").addClass('hide');
            }
        });

        //$(""#detailRiverLayer"").change(function (event) {
        //    event.preventDefault();

        //    if ($(this).is(':checked')) {
        //        if (map.hasLayer(detailriver)) {
        //            map.removeLayer(detailriver);
        //        } else {
        //            map.addLayer(detailriver);
        //        }
        //    } else {
        //        map.removeLayer(detailriver);
        //    }
        //});

        //$(""#markerLayer"").click(function (event) {
        //    event.preventDefault();
        //    if (map.hasLayer(marker)) {
        //        $(this).removeClass('selected');
        //        map.removeLayer(marker);
        //    } else {
        //        map.addLayer(marker);
        //        $(this).addClass('selected');
        //    }
        //});

        //$(""#circle1Layer"").click(function (event) {
        //    event.preventDefault();");
                WriteLiteral(@"
        //    if (map.hasLayer(circle1)) {
        //        $(this).removeClass('selected');
        //        map.removeLayer(circle1);
        //    } else {
        //        map.addLayer(circle1);
        //        $(this).addClass('selected');
        //    }
        //});

        //$(""#circle2Layer"").click(function (event) {
        //    event.preventDefault();
        //    if (map.hasLayer(circle2)) {
        //        $(this).removeClass('selected');
        //        map.removeLayer(circle2);
        //    } else {
        //        map.addLayer(circle2);
        //        $(this).addClass('selected');
        //    }
        //});

        //$(""#polygonLayer"").click(function (event) {
        //    event.preventDefault();
        //    if (map.hasLayer(polygon)) {
        //        $(this).removeClass('selected');
        //        map.removeLayer(polygon);
        //    } else {
        //        map.addLayer(polygon);
        //        $(this).addClass('selected');");
                WriteLiteral(@"
        //    }
        //});

        $(""#strategiclocationCegisLayer"").change(function (event) {
            event.preventDefault();

            if ($(this).is(':checked')) {
                if (map.hasLayer(slpoint)) {
                    map.removeLayer(slpoint);
                } else {
                    map.addLayer(slpoint);
                }
            } else {
                map.removeLayer(slpoint);
            }
        });

        $(""#strategiclocationDoELayer"").change(function (event) {
            event.preventDefault();

            if ($(this).is(':checked')) {
                if (map.hasLayer(slpointold)) {
                    map.removeLayer(slpointold);
                } else {
                    map.addLayer(slpointold);
                }
            } else {
                map.removeLayer(slpointold);
            }
        });

        $(""#hotSpotLayer"").change(function (event) {
            event.preventDefault();

            if ($(this).is(':c");
                WriteLiteral(@"hecked')) {
                if (map.hasLayer(hotSpot)) {
                    map.removeLayer(hotSpot);
                } else {
                    map.addLayer(hotSpot);
                }
            } else {
                map.removeLayer(hotSpot);
            }
        });

        $(""#divShowLabel"").change(function (event) {
            event.preventDefault();

            if ($(this).is(':checked')) {
                $("".divMapLabel, .distMapLabel"").removeClass('hide');
            } else {
                $("".divMapLabel, .distMapLabel"").addClass('hide');
            }
        });

        var smallIcon = new L.Icon({
            iconSize: [12, 19],
            iconAnchor: [13, 27],
            popupAnchor: [1, -24],
            iconUrl: '../images/green-10x17.png'
        });

        var smallIconForOld = new L.Icon({
            iconSize: [12, 19],
            iconAnchor: [13, 27],
            popupAnchor: [1, -24],
            iconUrl: '../images/red-10x17.png'
    ");
                WriteLiteral(@"    });

        //var btn = L.functionButtons([{ content: 'Chittagong' }, { content: 'Reset Map' }]);
        //btn.on('clicked', function (data) {
        //    if (data.idx == 0) {
        //        map.setView([22.514000, 91.845000], 13);
        //    } else if (data.idx == 1) {
        //        map.setView([23.78035, 90.41664], 6.5);
        //    } else {
        //        map.removeControl(btn);
        //    }
        //});
        //map.addControl(btn);

        //L.easyPrint({
        //    title: 'Print Map',
        //    elementsToHide: 'ul'//'p, h2, .gitButton'
        //}).addTo(map);

        var printer = L.easyPrint({
            tileLayer: blank,
            sizeModes: ['Current', 'A4Landscape', 'A4Portrait'],
            filename: 'myMap',
            exportOnly: true,
            hideControlContainer: true
        }).addTo(map);

        ////export control
        //map.addControl(L.exportControl({ codeid: 'nwrxs' }));

        //north arrow add to map
   ");
                WriteLiteral(@"     var north = L.control({ position: ""bottomright"" });
        north.onAdd = function (map) {
            var div = L.DomUtil.create(""div"", ""north-arrow"");
            div.innerHTML = '<i class=""fa fa-arrow-circle-o-up fa-2x""></i>';
            return div;
        }
        north.addTo(map);

        $('input:checkbox.leaflet-control-layers-selector').prop('checked', false);
        $("".leaflet-draw.leaflet-control"").hide();

        $('input:checkbox.leaflet-control-layers-selector').change(function (event) {
            event.preventDefault();

            if ($(this).is(':checked')) {
                $("".leaflet-draw.leaflet-control"").show();
            } else {
                $("".leaflet-draw.leaflet-control"").hide();
            }
        });

        $(""#divDrawLayer"").change(function (event) {
            event.preventDefault();

            if ($(this).is(':checked')) {
                $('.leaflet-draw.leaflet-control').attr('style', 'display: block;');
            } else");
                WriteLiteral(@" {
                $('.leaflet-draw.leaflet-control').attr('style', 'display: none;');
            }
        });

        $(""#leafletEasyPrint"").click(function () {
            printer.printMap('CurrentSize', 'MyManualPrint');
        });
    </script>

    <script type=""text/javascript"">
        var width = $('.leaflet-control-layers-toggle').width();
        var height = $('.leaflet-control-layers-toggle').height();
        $('#mapfit').attr('style', 'width: ' + width + 'px; height: ' + height + 'px; font-size: 23px; cursor: pointer;');
        $('#mapfit').attr('title', 'Reset map to 100% view.');

        $(""form"").submit(function (e) {
            e.preventDefault();
        });

        $('#mapfit').click(function () {
            map.setView([23.78035, 90.41664], 6.5);
        });

        function getQueryParams(qs) {
            qs = qs.split('+').join(' ');

            var params = {},
                tokens,
                re = /[?&]?([^=]+)=([^&]*)/g;

            ");
                WriteLiteral(@"while (tokens = re.exec(qs)) {
                params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);
            }

            return params;
        }

        $(document).ready(function () {
            var query = getQueryParams(document.location.search);

            if (query.length != undefined) {
                if (query.sl != '') {
                    searchPoint = new L.circle([query.lat, query.long], 30, {
                        color: 'red',
                        fillColor: '#f03',
                        fillOpacity: 0.5
                    }).addTo(map);

                    map.setView([query.lat, query.long], 17.5);
                }
            }
        });
    </script>

    <script type=""text/javascript"">
        function setLayer(val, prop) {
            if (val == 1 && prop == true) {//barishal district
                //map.setView([23.78035, 90.41664], 6.5);
                //setTimeout(console.log('Wait...'), 3000);
                map");
                WriteLiteral(@".setView([22.40105847, 90.42076170], 8.5);
            } else if (val == 2 && prop == true) {//chittagong district
                //map.setView([23.78035, 90.41664], 6.5);
                //setTimeout(console.log('Wait...'), 3000);
                map.setView([22.45132539, 92.16090729], 8.5);
            } else if (val == 3 && prop == true) {//dhaka district
                //map.setView([23.78035, 90.41664], 6.5);
                //setTimeout(console.log('Wait...'), 3000);
                map.setView([24.11390764, 90.38191916], 8.5);
            } else if (val == 4 && prop == true) {//dhaka district
                //map.setView([23.78035, 90.41664], 6.5);
                //setTimeout(console.log('Wait...'), 3000);
                map.setView([22.83669417, 89.39968854], 8.5);
            } else if (val == 5 && prop == true) {//dhaka district
                //map.setView([23.78035, 90.41664], 6.5);
                //setTimeout(console.log('Wait...'), 3000);
                map.setView([24.75");
                WriteLiteral(@"927770, 90.41954787], 10.5);
            } else if (val == 6 && prop == true) {//dhaka district
                //map.setView([23.78035, 90.41664], 6.5);
                //setTimeout(console.log('Wait...'), 3000);
                map.setView([24.67636099, 88.97581937], 8.5);
            } else if (val == 7 && prop == true) {//dhaka district
                //map.setView([23.78035, 90.41664], 6.5);
                //setTimeout(console.log('Wait...'), 3000);
                map.setView([25.84959245, 89.11176825], 8.5);
            } else if (val == 8 && prop == true) {//dhaka district
                //map.setView([23.78035, 90.41664], 6.5);
                //setTimeout(console.log('Wait...'), 3000);
                map.setView([24.71870834, 91.77248194], 8.5);
            } else {
                map.setView([23.78035, 90.41664], 6.5);
            }
        }
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
